// Code generated by fastssz. DO NOT EDIT.
// Hash: cdae743d1c8398ebd3289b4cf186ff4770d8008b500088d426a3d49ed1cd7668
// Version: 0.1.3
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(128)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint64(dst, uint64(m.MsgType))

	// Field (1) 'Height'
	dst = ssz.MarshalUint64(dst, uint64(m.Height))

	// Field (2) 'Round'
	dst = ssz.MarshalUint64(dst, uint64(m.Round))

	// Field (3) 'Identifier'
	dst = append(dst, m.Identifier[:]...)

	// Field (4) 'Root'
	dst = append(dst, m.Root[:]...)

	// Field (5) 'DataRound'
	dst = ssz.MarshalUint64(dst, uint64(m.DataRound))

	// Offset (6) 'RoundChangeJustification'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
		offset += 4
		offset += len(m.RoundChangeJustification[ii])
	}

	// Offset (7) 'PrepareJustification'
	dst = ssz.WriteOffset(dst, offset)

	// Field (6) 'RoundChangeJustification'
	if size := len(m.RoundChangeJustification); size > 13 {
		err = ssz.ErrListTooBigFn("Message.RoundChangeJustification", size, 13)
		return
	}
	{
		offset = 4 * len(m.RoundChangeJustification)
		for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(m.RoundChangeJustification[ii])
		}
	}
	for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
		if size := len(m.RoundChangeJustification[ii]); size > 51796 {
			err = ssz.ErrBytesLengthFn("Message.RoundChangeJustification[ii]", size, 51796)
			return
		}
		dst = append(dst, m.RoundChangeJustification[ii]...)
	}

	// Field (7) 'PrepareJustification'
	if size := len(m.PrepareJustification); size > 13 {
		err = ssz.ErrListTooBigFn("Message.PrepareJustification", size, 13)
		return
	}
	{
		offset = 4 * len(m.PrepareJustification)
		for ii := 0; ii < len(m.PrepareJustification); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(m.PrepareJustification[ii])
		}
	}
	for ii := 0; ii < len(m.PrepareJustification); ii++ {
		if size := len(m.PrepareJustification[ii]); size > 3696 {
			err = ssz.ErrBytesLengthFn("Message.PrepareJustification[ii]", size, 3696)
			return
		}
		dst = append(dst, m.PrepareJustification[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 128 {
		return ssz.ErrSize
	}

	tail := buf
	var o6, o7 uint64

	// Field (0) 'MsgType'
	m.MsgType = MessageType(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Height'
	m.Height = Height(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'Round'
	m.Round = Round(ssz.UnmarshallUint64(buf[16:24]))

	// Field (3) 'Identifier'
	copy(m.Identifier[:], buf[24:80])

	// Field (4) 'Root'
	copy(m.Root[:], buf[80:112])

	// Field (5) 'DataRound'
	m.DataRound = Round(ssz.UnmarshallUint64(buf[112:120]))

	// Offset (6) 'RoundChangeJustification'
	if o6 = ssz.ReadOffset(buf[120:124]); o6 > size {
		return ssz.ErrOffset
	}

	if o6 != 128 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (7) 'PrepareJustification'
	if o7 = ssz.ReadOffset(buf[124:128]); o7 > size || o6 > o7 {
		return ssz.ErrOffset
	}

	// Field (6) 'RoundChangeJustification'
	{
		buf = tail[o6:o7]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		m.RoundChangeJustification = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 51796 {
				return ssz.ErrBytesLength
			}
			if cap(m.RoundChangeJustification[indx]) == 0 {
				m.RoundChangeJustification[indx] = make([]byte, 0, len(buf))
			}
			m.RoundChangeJustification[indx] = append(m.RoundChangeJustification[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (7) 'PrepareJustification'
	{
		buf = tail[o7:]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		m.PrepareJustification = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 3696 {
				return ssz.ErrBytesLength
			}
			if cap(m.PrepareJustification[indx]) == 0 {
				m.PrepareJustification[indx] = make([]byte, 0, len(buf))
			}
			m.PrepareJustification[indx] = append(m.PrepareJustification[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 128

	// Field (6) 'RoundChangeJustification'
	for ii := 0; ii < len(m.RoundChangeJustification); ii++ {
		size += 4
		size += len(m.RoundChangeJustification[ii])
	}

	// Field (7) 'PrepareJustification'
	for ii := 0; ii < len(m.PrepareJustification); ii++ {
		size += 4
		size += len(m.PrepareJustification[ii])
	}

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint64(uint64(m.MsgType))

	// Field (1) 'Height'
	hh.PutUint64(uint64(m.Height))

	// Field (2) 'Round'
	hh.PutUint64(uint64(m.Round))

	// Field (3) 'Identifier'
	hh.PutBytes(m.Identifier[:])

	// Field (4) 'Root'
	hh.PutBytes(m.Root[:])

	// Field (5) 'DataRound'
	hh.PutUint64(uint64(m.DataRound))

	// Field (6) 'RoundChangeJustification'
	{
		subIndx := hh.Index()
		num := uint64(len(m.RoundChangeJustification))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range m.RoundChangeJustification {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 51796 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (51796+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (7) 'PrepareJustification'
	{
		subIndx := hh.Index()
		num := uint64(len(m.PrepareJustification))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range m.PrepareJustification {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 3696 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (3696+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}
