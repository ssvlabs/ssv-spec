// Code generated by fastssz. DO NOT EDIT.
// Hash: e8d4da029627f61fc9e6f7ec2d837905e84d31d318f66dc7795dbf951c9cdb3a
// Version: 0.1.3
package types

import (
	spec "github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ValidatorDuty object
func (v *ValidatorDuty) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorDuty object to a target array
func (v *ValidatorDuty) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Field (0) 'Type'
	dst = ssz.MarshalUint64(dst, uint64(v.Type))

	// Field (1) 'PubKey'
	dst = append(dst, v.PubKey[:]...)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(v.Slot))

	// Field (3) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(v.ValidatorIndex))

	// Field (4) 'CommitteeIndex'
	dst = ssz.MarshalUint64(dst, uint64(v.CommitteeIndex))

	// Field (5) 'CommitteeLength'
	dst = ssz.MarshalUint64(dst, v.CommitteeLength)

	// Field (6) 'CommitteesAtSlot'
	dst = ssz.MarshalUint64(dst, v.CommitteesAtSlot)

	// Field (7) 'ValidatorCommitteeIndex'
	dst = ssz.MarshalUint64(dst, v.ValidatorCommitteeIndex)

	// Offset (8) 'ValidatorSyncCommitteeIndices'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.ValidatorSyncCommitteeIndices) * 8

	// Field (8) 'ValidatorSyncCommitteeIndices'
	if size := len(v.ValidatorSyncCommitteeIndices); size > 13 {
		err = ssz.ErrListTooBigFn("ValidatorDuty.ValidatorSyncCommitteeIndices", size, 13)
		return
	}
	for ii := 0; ii < len(v.ValidatorSyncCommitteeIndices); ii++ {
		dst = ssz.MarshalUint64(dst, v.ValidatorSyncCommitteeIndices[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorDuty object
func (v *ValidatorDuty) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o8 uint64

	// Field (0) 'Type'
	v.Type = BeaconRole(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'PubKey'
	copy(v.PubKey[:], buf[8:56])

	// Field (2) 'Slot'
	v.Slot = spec.Slot(ssz.UnmarshallUint64(buf[56:64]))

	// Field (3) 'ValidatorIndex'
	v.ValidatorIndex = spec.ValidatorIndex(ssz.UnmarshallUint64(buf[64:72]))

	// Field (4) 'CommitteeIndex'
	v.CommitteeIndex = spec.CommitteeIndex(ssz.UnmarshallUint64(buf[72:80]))

	// Field (5) 'CommitteeLength'
	v.CommitteeLength = ssz.UnmarshallUint64(buf[80:88])

	// Field (6) 'CommitteesAtSlot'
	v.CommitteesAtSlot = ssz.UnmarshallUint64(buf[88:96])

	// Field (7) 'ValidatorCommitteeIndex'
	v.ValidatorCommitteeIndex = ssz.UnmarshallUint64(buf[96:104])

	// Offset (8) 'ValidatorSyncCommitteeIndices'
	if o8 = ssz.ReadOffset(buf[104:108]); o8 > size {
		return ssz.ErrOffset
	}

	if o8 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (8) 'ValidatorSyncCommitteeIndices'
	{
		buf = tail[o8:]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		v.ValidatorSyncCommitteeIndices = ssz.ExtendUint64(v.ValidatorSyncCommitteeIndices, num)
		for ii := 0; ii < num; ii++ {
			v.ValidatorSyncCommitteeIndices[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorDuty object
func (v *ValidatorDuty) SizeSSZ() (size int) {
	size = 108

	// Field (8) 'ValidatorSyncCommitteeIndices'
	size += len(v.ValidatorSyncCommitteeIndices) * 8

	return
}

// HashTreeRoot ssz hashes the ValidatorDuty object
func (v *ValidatorDuty) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorDuty object with a hasher
func (v *ValidatorDuty) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	hh.PutUint64(uint64(v.Type))

	// Field (1) 'PubKey'
	hh.PutBytes(v.PubKey[:])

	// Field (2) 'Slot'
	hh.PutUint64(uint64(v.Slot))

	// Field (3) 'ValidatorIndex'
	hh.PutUint64(uint64(v.ValidatorIndex))

	// Field (4) 'CommitteeIndex'
	hh.PutUint64(uint64(v.CommitteeIndex))

	// Field (5) 'CommitteeLength'
	hh.PutUint64(v.CommitteeLength)

	// Field (6) 'CommitteesAtSlot'
	hh.PutUint64(v.CommitteesAtSlot)

	// Field (7) 'ValidatorCommitteeIndex'
	hh.PutUint64(v.ValidatorCommitteeIndex)

	// Field (8) 'ValidatorSyncCommitteeIndices'
	{
		if size := len(v.ValidatorSyncCommitteeIndices); size > 13 {
			err = ssz.ErrListTooBigFn("ValidatorDuty.ValidatorSyncCommitteeIndices", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.ValidatorSyncCommitteeIndices {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(v.ValidatorSyncCommitteeIndices))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ValidatorDuty object
func (v *ValidatorDuty) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
