// Code generated by fastssz. DO NOT EDIT.
// Hash: 1097dcc1d8d7d159bfc09326b0cac349e4b7322f09a657802b3fa18b55a384fa
// Version: 0.1.3
package types

import (
	"github.com/attestantio/go-eth2-client/spec"
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Contribution object
func (c *Contribution) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Contribution object to a target array
func (c *Contribution) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SelectionProofSig'
	dst = append(dst, c.SelectionProofSig[:]...)

	// Field (1) 'Contribution'
	if dst, err = c.Contribution.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Contribution object
func (c *Contribution) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 256 {
		return ssz.ErrSize
	}

	// Field (0) 'SelectionProofSig'
	copy(c.SelectionProofSig[:], buf[0:96])

	// Field (1) 'Contribution'
	if err = c.Contribution.UnmarshalSSZ(buf[96:256]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Contribution object
func (c *Contribution) SizeSSZ() (size int) {
	size = 256
	return
}

// HashTreeRoot ssz hashes the Contribution object
func (c *Contribution) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Contribution object with a hasher
func (c *Contribution) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SelectionProofSig'
	hh.PutBytes(c.SelectionProofSig[:])

	// Field (1) 'Contribution'
	if err = c.Contribution.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Contribution object
func (c *Contribution) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the BeaconVote object
func (b *BeaconVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconVote object to a target array
func (b *BeaconVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockRoot'
	dst = append(dst, b.BlockRoot[:]...)

	// Field (1) 'Source'
	if b.Source == nil {
		b.Source = new(phase0.Checkpoint)
	}
	if dst, err = b.Source.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Target'
	if b.Target == nil {
		b.Target = new(phase0.Checkpoint)
	}
	if dst, err = b.Target.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconVote object
func (b *BeaconVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 112 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockRoot'
	copy(b.BlockRoot[:], buf[0:32])

	// Field (1) 'Source'
	if b.Source == nil {
		b.Source = new(phase0.Checkpoint)
	}
	if err = b.Source.UnmarshalSSZ(buf[32:72]); err != nil {
		return err
	}

	// Field (2) 'Target'
	if b.Target == nil {
		b.Target = new(phase0.Checkpoint)
	}
	if err = b.Target.UnmarshalSSZ(buf[72:112]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconVote object
func (b *BeaconVote) SizeSSZ() (size int) {
	size = 112
	return
}

// HashTreeRoot ssz hashes the BeaconVote object
func (b *BeaconVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconVote object with a hasher
func (b *BeaconVote) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockRoot'
	hh.PutBytes(b.BlockRoot[:])

	// Field (1) 'Source'
	if b.Source == nil {
		b.Source = new(phase0.Checkpoint)
	}
	if err = b.Source.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Target'
	if b.Target == nil {
		b.Target = new(phase0.Checkpoint)
	}
	if err = b.Target.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BeaconVote object
func (b *BeaconVote) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the ValidatorConsensusData object
func (v *ValidatorConsensusData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorConsensusData object to a target array
func (v *ValidatorConsensusData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'Duty'
	dst = ssz.WriteOffset(dst, offset)
	offset += v.Duty.SizeSSZ()

	// Field (1) 'Version'
	dst = ssz.MarshalUint64(dst, uint64(v.Version))

	// Offset (2) 'DataSSZ'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Duty'
	if dst, err = v.Duty.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'DataSSZ'
	if size := len(v.DataSSZ); size > 8388608 {
		err = ssz.ErrBytesLengthFn("ValidatorConsensusData.DataSSZ", size, 8388608)
		return
	}
	dst = append(dst, v.DataSSZ...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorConsensusData object
func (v *ValidatorConsensusData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2 uint64

	// Offset (0) 'Duty'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Version'
	v.Version = spec.DataVersion(ssz.UnmarshallUint64(buf[4:12]))

	// Offset (2) 'DataSSZ'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Duty'
	{
		buf = tail[o0:o2]
		if err = v.Duty.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'DataSSZ'
	{
		buf = tail[o2:]
		if len(buf) > 8388608 {
			return ssz.ErrBytesLength
		}
		if cap(v.DataSSZ) == 0 {
			v.DataSSZ = make([]byte, 0, len(buf))
		}
		v.DataSSZ = append(v.DataSSZ, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorConsensusData object
func (v *ValidatorConsensusData) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'Duty'
	size += v.Duty.SizeSSZ()

	// Field (2) 'DataSSZ'
	size += len(v.DataSSZ)

	return
}

// HashTreeRoot ssz hashes the ValidatorConsensusData object
func (v *ValidatorConsensusData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorConsensusData object with a hasher
func (v *ValidatorConsensusData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Duty'
	if err = v.Duty.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Version'
	hh.PutUint64(uint64(v.Version))

	// Field (2) 'DataSSZ'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(v.DataSSZ))
		if byteLen > 8388608 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(v.DataSSZ)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (8388608+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ValidatorConsensusData object
func (v *ValidatorConsensusData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the AssignedAggregator object
func (a *AssignedAggregator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AssignedAggregator object to a target array
func (a *AssignedAggregator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(a.ValidatorIndex))

	// Field (1) 'SelectionProof'
	dst = append(dst, a.SelectionProof[:]...)

	// Field (2) 'CommitteeIndex'
	dst = ssz.MarshalUint64(dst, a.CommitteeIndex)

	return
}

// UnmarshalSSZ ssz unmarshals the AssignedAggregator object
func (a *AssignedAggregator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 112 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorIndex'
	a.ValidatorIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'SelectionProof'
	copy(a.SelectionProof[:], buf[8:104])

	// Field (2) 'CommitteeIndex'
	a.CommitteeIndex = ssz.UnmarshallUint64(buf[104:112])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AssignedAggregator object
func (a *AssignedAggregator) SizeSSZ() (size int) {
	size = 112
	return
}

// HashTreeRoot ssz hashes the AssignedAggregator object
func (a *AssignedAggregator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AssignedAggregator object with a hasher
func (a *AssignedAggregator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorIndex'
	hh.PutUint64(uint64(a.ValidatorIndex))

	// Field (1) 'SelectionProof'
	hh.PutBytes(a.SelectionProof[:])

	// Field (2) 'CommitteeIndex'
	hh.PutUint64(a.CommitteeIndex)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AssignedAggregator object
func (a *AssignedAggregator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the AggregatorCommitteeConsensusData object
func (a *AggregatorCommitteeConsensusData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AggregatorCommitteeConsensusData object to a target array
func (a *AggregatorCommitteeConsensusData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Field (0) 'Version'
	dst = ssz.MarshalUint64(dst, uint64(a.Version))

	// Offset (1) 'Aggregators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Aggregators) * 112

	// Offset (2) 'AggregatorsCommitteeIndexes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.AggregatorsCommitteeIndexes) * 8

	// Offset (3) 'Attestations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(a.Attestations); ii++ {
		offset += 4
		offset += len(a.Attestations[ii])
	}

	// Offset (4) 'Contributors'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Contributors) * 112

	// Offset (5) 'SyncCommitteeSubnets'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.SyncCommitteeSubnets) * 8

	// Offset (6) 'SyncCommitteeContributions'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Aggregators'
	if size := len(a.Aggregators); size > 1000 {
		err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.Aggregators", size, 1000)
		return
	}
	for ii := 0; ii < len(a.Aggregators); ii++ {
		if dst, err = a.Aggregators[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'AggregatorsCommitteeIndexes'
	if size := len(a.AggregatorsCommitteeIndexes); size > 1000 {
		err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.AggregatorsCommitteeIndexes", size, 1000)
		return
	}
	for ii := 0; ii < len(a.AggregatorsCommitteeIndexes); ii++ {
		dst = ssz.MarshalUint64(dst, a.AggregatorsCommitteeIndexes[ii])
	}

	// Field (3) 'Attestations'
	if size := len(a.Attestations); size > 1000 {
		err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.Attestations", size, 1000)
		return
	}
	{
		offset = 4 * len(a.Attestations)
		for ii := 0; ii < len(a.Attestations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(a.Attestations[ii])
		}
	}
	for ii := 0; ii < len(a.Attestations); ii++ {
		if size := len(a.Attestations[ii]); size > 1048576 {
			err = ssz.ErrBytesLengthFn("AggregatorCommitteeConsensusData.Attestations[ii]", size, 1048576)
			return
		}
		dst = append(dst, a.Attestations[ii]...)
	}

	// Field (4) 'Contributors'
	if size := len(a.Contributors); size > 64 {
		err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.Contributors", size, 64)
		return
	}
	for ii := 0; ii < len(a.Contributors); ii++ {
		if dst, err = a.Contributors[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (5) 'SyncCommitteeSubnets'
	if size := len(a.SyncCommitteeSubnets); size > 64 {
		err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.SyncCommitteeSubnets", size, 64)
		return
	}
	for ii := 0; ii < len(a.SyncCommitteeSubnets); ii++ {
		dst = ssz.MarshalUint64(dst, a.SyncCommitteeSubnets[ii])
	}

	// Field (6) 'SyncCommitteeContributions'
	if size := len(a.SyncCommitteeContributions); size > 64 {
		err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.SyncCommitteeContributions", size, 64)
		return
	}
	for ii := 0; ii < len(a.SyncCommitteeContributions); ii++ {
		if dst, err = a.SyncCommitteeContributions[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AggregatorCommitteeConsensusData object
func (a *AggregatorCommitteeConsensusData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3, o4, o5, o6 uint64

	// Field (0) 'Version'
	a.Version = spec.DataVersion(ssz.UnmarshallUint64(buf[0:8]))

	// Offset (1) 'Aggregators'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'AggregatorsCommitteeIndexes'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Attestations'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'Contributors'
	if o4 = ssz.ReadOffset(buf[20:24]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'SyncCommitteeSubnets'
	if o5 = ssz.ReadOffset(buf[24:28]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Offset (6) 'SyncCommitteeContributions'
	if o6 = ssz.ReadOffset(buf[28:32]); o6 > size || o5 > o6 {
		return ssz.ErrOffset
	}

	// Field (1) 'Aggregators'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 112, 1000)
		if err != nil {
			return err
		}
		a.Aggregators = make([]AssignedAggregator, num)
		for ii := 0; ii < num; ii++ {
			if err = a.Aggregators[ii].UnmarshalSSZ(buf[ii*112 : (ii+1)*112]); err != nil {
				return err
			}
		}
	}

	// Field (2) 'AggregatorsCommitteeIndexes'
	{
		buf = tail[o2:o3]
		num, err := ssz.DivideInt2(len(buf), 8, 1000)
		if err != nil {
			return err
		}
		a.AggregatorsCommitteeIndexes = ssz.ExtendUint64(a.AggregatorsCommitteeIndexes, num)
		for ii := 0; ii < num; ii++ {
			a.AggregatorsCommitteeIndexes[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (3) 'Attestations'
	{
		buf = tail[o3:o4]
		num, err := ssz.DecodeDynamicLength(buf, 1000)
		if err != nil {
			return err
		}
		a.Attestations = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1048576 {
				return ssz.ErrBytesLength
			}
			if cap(a.Attestations[indx]) == 0 {
				a.Attestations[indx] = make([]byte, 0, len(buf))
			}
			a.Attestations[indx] = append(a.Attestations[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (4) 'Contributors'
	{
		buf = tail[o4:o5]
		num, err := ssz.DivideInt2(len(buf), 112, 64)
		if err != nil {
			return err
		}
		a.Contributors = make([]AssignedAggregator, num)
		for ii := 0; ii < num; ii++ {
			if err = a.Contributors[ii].UnmarshalSSZ(buf[ii*112 : (ii+1)*112]); err != nil {
				return err
			}
		}
	}

	// Field (5) 'SyncCommitteeSubnets'
	{
		buf = tail[o5:o6]
		num, err := ssz.DivideInt2(len(buf), 8, 64)
		if err != nil {
			return err
		}
		a.SyncCommitteeSubnets = ssz.ExtendUint64(a.SyncCommitteeSubnets, num)
		for ii := 0; ii < num; ii++ {
			a.SyncCommitteeSubnets[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (6) 'SyncCommitteeContributions'
	{
		buf = tail[o6:]
		num, err := ssz.DivideInt2(len(buf), 160, 64)
		if err != nil {
			return err
		}
		a.SyncCommitteeContributions = make([]altair.SyncCommitteeContribution, num)
		for ii := 0; ii < num; ii++ {
			if err = a.SyncCommitteeContributions[ii].UnmarshalSSZ(buf[ii*160 : (ii+1)*160]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AggregatorCommitteeConsensusData object
func (a *AggregatorCommitteeConsensusData) SizeSSZ() (size int) {
	size = 32

	// Field (1) 'Aggregators'
	size += len(a.Aggregators) * 112

	// Field (2) 'AggregatorsCommitteeIndexes'
	size += len(a.AggregatorsCommitteeIndexes) * 8

	// Field (3) 'Attestations'
	for ii := 0; ii < len(a.Attestations); ii++ {
		size += 4
		size += len(a.Attestations[ii])
	}

	// Field (4) 'Contributors'
	size += len(a.Contributors) * 112

	// Field (5) 'SyncCommitteeSubnets'
	size += len(a.SyncCommitteeSubnets) * 8

	// Field (6) 'SyncCommitteeContributions'
	size += len(a.SyncCommitteeContributions) * 160

	return
}

// HashTreeRoot ssz hashes the AggregatorCommitteeConsensusData object
func (a *AggregatorCommitteeConsensusData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AggregatorCommitteeConsensusData object with a hasher
func (a *AggregatorCommitteeConsensusData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Version'
	hh.PutUint64(uint64(a.Version))

	// Field (1) 'Aggregators'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Aggregators))
		if num > 1000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Aggregators {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1000)
	}

	// Field (2) 'AggregatorsCommitteeIndexes'
	{
		if size := len(a.AggregatorsCommitteeIndexes); size > 1000 {
			err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.AggregatorsCommitteeIndexes", size, 1000)
			return
		}
		subIndx := hh.Index()
		for _, i := range a.AggregatorsCommitteeIndexes {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(a.AggregatorsCommitteeIndexes))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1000, numItems, 8))
	}

	// Field (3) 'Attestations'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Attestations))
		if num > 1000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Attestations {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1048576 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1048576+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1000)
	}

	// Field (4) 'Contributors'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Contributors))
		if num > 64 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Contributors {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 64)
	}

	// Field (5) 'SyncCommitteeSubnets'
	{
		if size := len(a.SyncCommitteeSubnets); size > 64 {
			err = ssz.ErrListTooBigFn("AggregatorCommitteeConsensusData.SyncCommitteeSubnets", size, 64)
			return
		}
		subIndx := hh.Index()
		for _, i := range a.SyncCommitteeSubnets {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(a.SyncCommitteeSubnets))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(64, numItems, 8))
	}

	// Field (6) 'SyncCommitteeContributions'
	{
		subIndx := hh.Index()
		num := uint64(len(a.SyncCommitteeContributions))
		if num > 64 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.SyncCommitteeContributions {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 64)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AggregatorCommitteeConsensusData object
func (a *AggregatorCommitteeConsensusData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
